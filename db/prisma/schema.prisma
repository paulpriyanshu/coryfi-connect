generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                     @id @default(autoincrement())
  userdp                   String?
  email                    String                  @unique
  name                     String
  posts                    Post[]                  @relation("UserPosts")
  evaluationsStarted       Evaluation[]            @relation("EvaluationRequester")
  evaluationsReceived      Evaluation[]            @relation("EvaluationRecipient")
  intermediaryPaths        Path[]                  @relation("UserAsIntermediary")
  connections              Connection[]            @relation("ConnectionRequester")
  connectionsReceived      Connection[]            @relation("ConnectionRecipient")
  evaluationApprovals      EvaluationApprovals[]   @relation("EvaluationApprovalsRequester")
  evaluationApprovalsReceived EvaluationApprovals[] @relation("EvaluationApprovalsRecipient")
  comments                 Comment[]
  userDetails              UserDetails?
}

model UserDetails {
  id           Int      @id @default(autoincrement())
  bio          String?
  displayImage String?
  city         String?
  state        String?
  country      String?
  phoneNumber  String?
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
}

model EvaluationApprovals {
  id                Int           @id @default(autoincrement())
  requesterId       Int
  requester         User          @relation("EvaluationApprovalsRequester", fields: [requesterId], references: [id])
  recipientId       Int
  recipient         User          @relation("EvaluationApprovalsRecipient", fields: [recipientId], references: [id])
  status            String        @default("PENDING")
  evaluationIds     Int[]
  evaluationWorked  Int?
  createdAt         DateTime      @default(now())

  @@unique([requesterId, recipientId,createdAt])
}

model Evaluation {
  id             Int           @id @default(autoincrement())
  requesterId    Int
  requester      User          @relation("EvaluationRequester", fields: [requesterId], references: [id])
  recipientId    Int
  recipient      User          @relation("EvaluationRecipient", fields: [recipientId], references: [id])
  status         String        @default("ONGOING")
  paths          Path[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Path {
  id             Int           @id @default(autoincrement())
  evaluationId   Int
  evaluation     Evaluation    @relation(fields: [evaluationId], references: [id])
  intermediaryId Int
  intermediary   User          @relation("UserAsIntermediary", fields: [intermediaryId], references: [id])
  approved       String        @default("FALSE")
  new_order      Int
  order          Int
  createdAt      DateTime      @default(now())

  @@unique([evaluationId, intermediaryId])
}
 
model Connection {
  id                Int           @id @default(autoincrement())
  requesterId       Int
  requester         User          @relation("ConnectionRequester", fields: [requesterId], references: [id])
  recipientId       Int
  recipient         User          @relation("ConnectionRecipient", fields: [recipientId], references: [id])
  status            String        @default("PENDING")
  StrengthLevel     Int?
  createdAt         DateTime      @default(now())

  @@unique([requesterId, recipientId,createdAt])
}

model Post {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation("UserPosts", fields: [userId], references: [id])
  content         String?
  imageUrl        String[]
  videoUrl        String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  likes           String[]     @default([])
  shares          Int[]     @default([])
  comments        Comment[]
  reports         Int[]     @default([])
  reportReasons   String[]  @default([])

  @@index([userId])
}

model Comment {
  id          Int       @id @default(autoincrement())
  postId      Int
  post        Post      @relation(fields: [postId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    Int?      // Optional field for replies, null for top-level comments
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies") // Replies to this comment

  // Optionally, you can add other fields like likes, shares, etc.
}